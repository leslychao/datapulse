### ========================
### ACCOUNT — CREATE (201)
### ========================
POST {{host}}/api/accounts
Content-Type: application/json

{
  "name": "Test Account"
}

> {%
  client.test("Account CREATE: 201", function () {
    client.assert(response.status === 201, "expected 201, got " + response.status);
    var b = response.body || {};
    client.assert(b.id !== undefined, "missing id");
    client.assert(typeof b.name === "string" && b.name.length > 0, "invalid name");
    client.global.set("accountId", String(b.id || ""));
  });
%}

### ACCOUNT — UPDATE (200)
PUT {{host}}/api/accounts/{{accountId}}
Content-Type: application/json

{
  "id": {{accountId}},
  "name": "Test Account — updated"
}

> {%
  client.test("Account UPDATE: 200", function () {
    client.assert(response.status === 200, "expected 200, got " + response.status);
    var b = response.body || {};
    client.assert(String(b.id) === String(client.global.get("accountId")), "id mismatch");
    client.assert(/updated/i.test(b.name), "name not updated");
  });
%}

### ACCOUNT — NEGATIVE: blank name → 400
POST {{host}}/api/accounts
Content-Type: application/json

{
  "name": " "
}

> {%
  client.test("Account CREATE blank name: 400", function () {
    client.assert(response.status === 400, "expected 400, got " + response.status);
    var b = response.body || {};
    var msg = (b && b.message) || (b && b.error) ||
        (Array.isArray(b.errors) && b.errors[0] && (b.errors[0].message || b.errors[0])) || "";
    client.assert(/name|обязательно|пуст/i.test(msg), "no validation hint: " + msg);
  });
%}

### ACCOUNT — NEGATIVE: name > 32 → 400
POST {{host}}/api/accounts
Content-Type: application/json

{
  "name": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
}

> {%
  client.test("Account CREATE long name: 400", function () {
    client.assert(response.status === 400, "expected 400, got " + response.status);
    var b = response.body || {};
    var msg = (b && b.message) || (b && b.error) ||
        (Array.isArray(b.errors) && b.errors[0] && (b.errors[0].message || b.errors[0])) || "";
    client.assert(/длина|max/i.test(msg), "no length hint: " + msg);
  });
%}

### ACCOUNT — NEGATIVE: not found → 404
PUT {{host}}/api/accounts/9999999
Content-Type: application/json

{
  "id": 9999999,
  "name": "Not found"
}

> {%
  client.test("Account UPDATE not found: 404", function () {
    client.assert(response.status === 404, "expected 404, got " + response.status);
    var b = response.body || {};
    var msg = (b && b.message) || (b && b.error) ||
        (Array.isArray(b.errors) && b.errors[0] && (b.errors[0].message || b.errors[0])) || "";
    client.assert(/не\sнайден/i.test(msg), "no 'not found' hint: " + msg);
  });
%}

### ACCOUNT — NEGATIVE: path id ≠ body id → 4xx
PUT {{host}}/api/accounts/123456
Content-Type: application/json

{
  "id": 654321,
  "name": "Mismatch"
}

> {%
  client.test("Account UPDATE id mismatch: 4xx", function () {
    client.assert(String(response.status).startsWith("4"), "expected 4xx, got " + response.status);
  });
%}

### ========================
### ACCOUNT-CONNECTION — CREATE (WB)
### ========================
POST {{host}}/api/account-connections
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": "WILDBERRIES",
  "credentials": { "token": "xxx" },
  "active": true
}

> {%
  client.test("AC CREATE WB: 201", function () {
    client.assert(response.status === 201, "expected 201, got " + response.status);
    var b = response.body || {};
    client.global.set("acIdWb", String(b.id || ""));
    client.assert(b.marketplace === "WILDBERRIES", "wrong marketplace");
    client.assert(b.active === true, "active not true");
  });
%}

### ACCOUNT-CONNECTION — UPDATE (WB)
PUT {{host}}/api/account-connections/{{acIdWb}}
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": "WILDBERRIES",
  "credentials": { "token": "yyy" },
  "active": false
}

> {%
  client.test("AC UPDATE WB: 200", function () {
    client.assert(response.status === 200, "expected 200, got " + response.status);
    var b = response.body || {};
    client.assert(b.active === false, "active not false");
  });
%}

### ACCOUNT-CONNECTION — CREATE (OZON)
POST {{host}}/api/account-connections
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": "OZON",
  "credentials": { "clientId": "xxx", "apiKey": "yyy" },
  "active": true
}

> {%
  client.test("AC CREATE OZON: 201", function () {
    client.assert(response.status === 201, "expected 201, got " + response.status);
    var b = response.body || {};
    client.global.set("acIdOzon", String(b.id || ""));
    client.assert(b.marketplace === "OZON", "wrong marketplace");
  });
%}

### ACCOUNT-CONNECTION — UPDATE (OZON)
PUT {{host}}/api/account-connections/{{acIdOzon}}
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": "OZON",
  "credentials": { "clientId": "new", "apiKey": "new" },
  "active": false
}

> {%
  client.test("AC UPDATE OZON: 200", function () {
    client.assert(response.status === 200, "expected 200, got " + response.status);
    var b = response.body || {};
    client.assert(b.active === false, "active not false");
  });
%}

### ACCOUNT-CONNECTION — NEGATIVE: credentials missing → 400
POST {{host}}/api/account-connections
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": "WILDBERRIES",
  "active": true
}

> {%
  client.test("AC missing credentials: 400", function () {
    client.assert(response.status === 400, "expected 400, got " + response.status);
    var b = response.body || {};
    var msg = (b && b.message) || (b && b.error) ||
        (Array.isArray(b.errors) && b.errors[0] && (b.errors[0].message || b.errors[0])) || "";
    client.assert(/credential|учет/i.test(msg), "no credentials hint: " + msg);
  });
%}

### ACCOUNT-CONNECTION — NEGATIVE: mismatched credentials type → 400
POST {{host}}/api/account-connections
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": "WILDBERRIES",
  "credentials": { "clientId": "ozon", "apiKey": "ozon" },
  "active": true
}

> {%
  client.test("AC mismatch credentials: 400", function () {
    client.assert(response.status === 400, "expected 400, got " + response.status);
    var b = response.body || {};
    var msg = (b && b.message) || (b && b.error) ||
        (Array.isArray(b.errors) && b.errors[0] && (b.errors[0].message || b.errors[0])) || "";
    client.assert(/marketplace|credential|type/i.test(msg), "no hint: " + msg);
  });
%}

### ACCOUNT-CONNECTION — NEGATIVE: null marketplaceType → 400
POST {{host}}/api/account-connections
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": null,
  "credentials": {},
  "active": true
}

> {%
  client.test("AC null marketplaceType: 400", function () {
    client.assert(response.status === 400, "expected 400, got " + response.status);
  });
%}

### ACCOUNT-CONNECTION — NEGATIVE: null accountId → 400
POST {{host}}/api/account-connections
Content-Type: application/json

{
  "accountId": null,
  "marketplaceType": "OZON",
  "credentials": {},
  "active": true
}

> {%
  client.test("AC null accountId: 400", function () {
    client.assert(response.status === 400, "expected 400, got " + response.status);
  });
%}

### ACCOUNT-CONNECTION — NEGATIVE: unknown id → 404
PUT {{host}}/api/account-connections/999999999
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": "OZON",
  "credentials": { "clientId": "a", "apiKey": "b" },
  "active": true
}

> {%
  client.test("AC UPDATE unknown id: 404", function () {
    client.assert(response.status === 404, "expected 404, got " + response.status);
    var b = response.body || {};
    var msg = (b && b.message) || (b && b.error) ||
        (Array.isArray(b.errors) && b.errors[0] && (b.errors[0].message || b.errors[0])) || "";
    client.assert(/не\sнайден/i.test(msg), "no 'not found' hint: " + msg);
  });
%}

### ACCOUNT-CONNECTION — NEGATIVE: duplicate marketplace → 400
POST {{host}}/api/account-connections
Content-Type: application/json

{
  "accountId": {{accountId}},
  "marketplaceType": "OZON",
  "credentials": { "clientId": "dup", "apiKey": "dup" },
  "active": true
}

> {%
  client.test("AC duplicate marketplace: 400", function () {
    client.assert(response.status === 400, "expected 400, got " + response.status);
    var b = response.body || {};
    var msg = (b && b.message) || (b && b.error) ||
        (Array.isArray(b.errors) && b.errors[0] && (b.errors[0].message || b.errors[0])) || "";
    client.assert(/существует|exists/i.test(msg), "no duplicate hint: " + msg);
  });
%}

### CLEANUP — DELETE OZON
DELETE {{host}}/api/account-connections/{{acIdOzon}}

> {%
  client.test("AC DELETE OZON: 204", function () {
    client.assert(response.status === 204, "expected 204, got " + response.status);
  });
%}

### CLEANUP — DELETE WB
DELETE {{host}}/api/account-connections/{{acIdWb}}

> {%
  client.test("AC DELETE WB: 204", function () {
    client.assert(response.status === 204, "expected 204, got " + response.status);
  });
%}

### CLEANUP — DELETE ACCOUNT
DELETE {{host}}/api/accounts/{{accountId}}

> {%
  client.test("Account DELETE: 204", function () {
    client.assert(response.status === 204, "expected 204, got " + response.status);
  });
%}
